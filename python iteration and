rnage iteration
my_list = [1, 2]

for v in range(2):
  my_list.insert(-1, my_list[v])

print(my_list)

range (2) means we reiterate twice on 
first iteration  of list [1,2]
v = 0 
so in mylist what has the value of [v] = 0 
it is 1 in [1,2]
 my_list = [1, >> we add 1, 2]
 my_list = [1, 1, 2]

on the second iteration 
v=1
so what is the value of v=1 in my list =  1 

my_list = [1,1,1,2]





##############################
##########################################
What is the output of the following code
data = [1, 2, 3, none, (), [], ]
print(len(data))
empty tuple, list still counts as objects  or elements
so length is 6 

to remove all items in a dictionary d.clear()

##############################################
####################################

what is the expected output of the following code 

data = {'one': 'two', 'two': 'three', 'three': 'one'}
res = data['three']

for _ in range(len(data)):
  res = data[]

print(res)

1. data is a dictionary 
2. it is print outiside the loop = so this means we will only print the final value 
in the range we have 3 key pairs so the lenthg is 3 
3. res is set to the key value of three =  one 
4.  the for loop runs 3 times 


in the first iteration
the assigned value of res = data['three'] =  one
so what is the value of one 
  res = data {one}
      = two 

in the second iteration, res has been assigned the value of two 
so what is the value of two
  res = data {two}
      = three

in the third iteration, res has been assigned the value of three
so what is the value of three 
  res = data {three}
      = one
################################
##################
###########################################

.copy() method references new record not assign the same record a different key
so 
data = {'name' : 'peter', 'age':30}
person = data.copy()
print(id(data) == id(person))
answer should be false, since they are not the same records 


############################
#####################
tuple + tuple leads to tuple with concantenation 
data1 = '1', '2'
data2 = ('3', '4')
print(data1 + data2)
('1', '2', '3', '4')     .../// this is a tuple and not a value 


slicing a tuple 

data = (1, 2, 4, 8)
data = data[1:-1]    
//////////
(1, 2, 4, 8)
0 1 2 3 
-4 -3 -2 -1
so data[1:-1]  becomes 2, 4
///////////
data = data[0]
print(date)
 the result should be 2 


#########################################
##############################
what is the output of the following
my_list = [3, 1, -2]
print(my_list[my_list[-1]])
so the output will be 1 

########################

slicing a list 
w = [7, 3, 23, 42]
x =w[1:]
y =w[1:]
z = w
y[0] = 10
z[1] = 20 
 print w 
when you slice it creates a new memory 
w = [7, 3, 23, 42]
       0 1  2   3
y = [3, 23, 42]
x = [3, 23, 42]
so for y[0] = 10
we are assigning value of 0 to 10, ## no changes on w memory will occur ... 
we are assigning not inserting 
for z[1] = 20 
we assigning the value of 1 to 20 
so since they are all pointing at the memory of w 
w = [7, 20, 23, 42]

#######################################
########################
#############


nums = []
vals = nums
val.append(1)
solution: 
since val shares the same memory as nums they are the same length

